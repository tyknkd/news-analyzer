services:
  web-server:
    build:
      context: .
      args:
        APP: web-server
    container_name: web-server
    environment:
      PORT: ${WEBSERVER_PORT}
      WEBSERVER_DB: ${WEBSERVER_DB}
      POSTGRES_HOST_PORT: ${POSTGRES_HOST_PORT}
      POSTGRES_CONTAINER_PORT: ${POSTGRES_CONTAINER_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    ports:
      - ${WEBSERVER_PORT}:${WEBSERVER_PORT}
    depends_on:
      db:
        condition: service_healthy

  data-analyzer:
    build:
      context: .
      args:
        APP: data-analyzer
    container_name: data-analyzer
    environment:
      PORT: ${ANALYZER_PORT}
      WEBSERVER_DB: ${ANALYZER_DB}
      POSTGRES_HOST_PORT: ${POSTGRES_HOST_PORT}
      POSTGRES_CONTAINER_PORT: ${POSTGRES_CONTAINER_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    ports:
      - ${ANALYZER_PORT}:${ANALYZER_PORT}
    depends_on:
      - web-server


  data-collector:
    build:
      context: .
      args:
        APP: data-collector
    container_name: data-collector
    environment:
      PORT: ${COLLECTOR_PORT}
      COLLECTOR_DB: ${COLLECTOR_DB}
      POSTGRES_HOST_PORT: ${POSTGRES_HOST_PORT}
      POSTGRES_CONTAINER_PORT: ${POSTGRES_CONTAINER_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      NEWS_API_KEY_FILE: /run/secrets/news_api_key
    secrets:
      - postgres_password
      - news_api_key
    ports:
      - ${COLLECTOR_PORT}:${COLLECTOR_PORT}
    depends_on:
      - data-analyzer

  db:
    image: postgres:16.2-alpine
    container_name: db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      ADDITIONAL_POSTGRES_DB: ${ADDITIONAL_POSTGRES_DB}
    secrets:
      - postgres_password
    ports:
      - ${POSTGRES_HOST_PORT}:${POSTGRES_CONTAINER_PORT}
    volumes:
      - ./docker-databases/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./.docker-data/.pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  news_api_key:
    file: ./secrets/news_api_key.txt