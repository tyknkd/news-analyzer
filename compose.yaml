services:
  web-server:
    build:
      context: .
      target: app
      args:
        APP: ${WEBSERVER_HOST}
    image: tyknkd/newsanalyzer-webserver:${PROJECT_VERSION}
    container_name: ${WEBSERVER_HOST}
    environment:
      PORT: ${WEBSERVER_PORT}
      COLLECTOR_HOST: ${COLLECTOR_HOST}
      ANALYZER_HOST: ${ANALYZER_HOST}
      WEBSERVER_HOST: ${WEBSERVER_HOST}
      WEBSERVER_DB: ${WEBSERVER_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      ANALYZER_EXCHANGE: ${ANALYZER_EXCHANGE}
      ANALYZER_QUEUE: ${ANALYZER_QUEUE}
      ANALYZER_ROUTING_KEY: ${ANALYZER_ROUTING_KEY}
    secrets:
      - postgres_password
    ports:
      - ${WEBSERVER_PORT}:${WEBSERVER_PORT}
    depends_on:
      db:
        condition: service_healthy
      mq:
        condition: service_healthy

  data-analyzer:
    build:
      context: .
      target: spark-app
      args:
        APP: ${ANALYZER_HOST}
    image: tyknkd/newsanalyzer-dataanalyzer:${PROJECT_VERSION}
    container_name: ${ANALYZER_HOST}
    environment:
      PORT: ${ANALYZER_PORT}
      COLLECTOR_HOST: ${COLLECTOR_HOST}
      ANALYZER_HOST: ${ANALYZER_HOST}
      WEBSERVER_HOST: ${WEBSERVER_HOST}
      WEBSERVER_PORT: ${WEBSERVER_PORT}
      ANALYZER_DB: ${ANALYZER_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      ANALYZER_EXCHANGE: ${ANALYZER_EXCHANGE}
      ANALYZER_QUEUE: ${ANALYZER_QUEUE}
      ANALYZER_ROUTING_KEY: ${ANALYZER_ROUTING_KEY}
      COLLECTOR_EXCHANGE: ${COLLECTOR_EXCHANGE}
      COLLECTOR_QUEUE: ${COLLECTOR_QUEUE}
      COLLECTOR_ROUTING_KEY: ${COLLECTOR_ROUTING_KEY}
    secrets:
      - postgres_password
    ports:
      - ${ANALYZER_PORT}:${ANALYZER_PORT}
    depends_on:
      - db
      - web-server

  data-collector:
    build:
      context: .
      target: app
      args:
        APP: ${COLLECTOR_HOST}
    image: tyknkd/newsanalyzer-datacollector:${PROJECT_VERSION}
    container_name: ${COLLECTOR_HOST}
    environment:
      PORT: ${COLLECTOR_PORT}
      COLLECTOR_HOST: ${COLLECTOR_HOST}
      ANALYZER_HOST: ${ANALYZER_HOST}
      WEBSERVER_HOST: ${WEBSERVER_HOST}
      ANALYZER_PORT: ${ANALYZER_PORT}
      COLLECTOR_DB: ${COLLECTOR_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      NEWS_API_KEY_FILE: /run/secrets/news_api_key
      COLLECTOR_EXCHANGE: ${COLLECTOR_EXCHANGE}
      COLLECTOR_QUEUE: ${COLLECTOR_QUEUE}
      COLLECTOR_ROUTING_KEY: ${COLLECTOR_ROUTING_KEY}
    secrets:
      - postgres_password
      - news_api_key
    ports:
      - ${COLLECTOR_PORT}:${COLLECTOR_PORT}
    depends_on:
      - db
      - data-analyzer

  db:
    image: postgres:16.2-alpine
    container_name: ${POSTGRES_HOST}
    environment:
      POSTGRES_HOST: ""
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      ADDITIONAL_POSTGRES_DB: ${ADDITIONAL_POSTGRES_DB}
    secrets:
      - postgres_password
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./docker-databases/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./.docker-data/.pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mq:
    image: rabbitmq:3.13-management
    container_name: ${RABBITMQ_HOST}
    ports:
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
      - ${RABBITMQ_METRICS_PORT}:${RABBITMQ_METRICS_PORT}
    volumes:
      - ./rabbitmq-plugins:/etc/rabbitmq/enabled_plugins
      - ./.docker-data/.rabbit-data/.rabbit-lib:/var/lib/rabbitmq
      - ./.docker-data/.rabbit-data/.rabbit-log:/var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    user: root
    restart: unless-stopped
    ports:
      - ${PROMETHEUS_PORT}:${PROMETHEUS_PORT}
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./.docker-data/.prometheus-data:/prometheus
    depends_on:
      - web-server

  grafana:
    image: grafana/grafana-oss:10.4.2
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_FEATURE_TOGGLES_ENABLE: 'publicDashboards'
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_password
    secrets:
      - grafana_password
    user: root
    ports:
      - ${GRAFANA_PORT}:${GRAFANA_PORT}
    volumes:
      - ./monitoring/dashboard.json:/var/lib/grafana/dashboards/dashboard.json
      - ./monitoring/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./monitoring/providers.yaml:/etc/grafana/provisioning/dashboards/providers.yaml
      - ./.docker-data/.grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

  test:
    build:
      context: .
      target: gradle-test
    environment:
      COLLECTOR_HOST: ${COLLECTOR_HOST}
      ANALYZER_HOST: ${ANALYZER_HOST}
      WEBSERVER_HOST: ${WEBSERVER_HOST}
      COLLECTOR_TEST_DB: ${COLLECTOR_TEST_DB}
      ANALYZER_TEST_DB: ${ANALYZER_TEST_DB}
      WEBSERVER_TEST_DB: ${WEBSERVER_TEST_DB}
      COLLECTOR_PORT: ${COLLECTOR_PORT}
      ANALYZER_PORT: ${ANALYZER_PORT}
      WEBSERVER_PORT: ${WEBSERVER_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      NEWS_API_KEY_FILE: /run/secrets/news_api_key
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      ANALYZER_EXCHANGE: ${ANALYZER_EXCHANGE}
      ANALYZER_QUEUE: ${ANALYZER_QUEUE}
      ANALYZER_ROUTING_KEY: ${ANALYZER_ROUTING_KEY}
      COLLECTOR_EXCHANGE: ${COLLECTOR_EXCHANGE}
      COLLECTOR_QUEUE: ${COLLECTOR_QUEUE}
      COLLECTOR_ROUTING_KEY: ${COLLECTOR_ROUTING_KEY}
    secrets:
      - postgres_password
      - news_api_key
    profiles:
      - test
    depends_on:
      db:
        condition: service_healthy
      mq:
        condition: service_healthy

secrets:
  postgres_password:
    environment: "POSTGRES_PASSWORD"
  news_api_key:
    environment: "NEWS_API_KEY"
  grafana_password:
    environment: "GRAFANA_PASSWORD"